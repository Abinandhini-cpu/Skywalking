/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

def version = '1.3'

// Test cases for different JDK versions
def jdk_cases = ['jdk8', 'jdk9', 'jdk11', 'jdk12'].collect {
    [
            "name"      : "Single Node Tests(${it.toUpperCase()})",
            "e2eVersion": "$it-$version",
            "moduleName": "e2e-single-service"
    ]
}

// Test cases for features
def feature_cases = [
        [
                "name"      : "Agent Reboot Tests(JDK8)",
                "e2eVersion": "jdk8-$version",
                "moduleName": "e2e-agent-reboot"
        ], [
                "name"      : "Cluster Tests (ES6/ZK/JDK8)",
                "e2eVersion": "jdk8-$version",
                "moduleName": "e2e-cluster/test-runner"
        ], [
                "name"      : "TTL ES Tests(JDK8)",
                "e2eVersion": "jdk8-$version",
                "moduleName": "e2e-ttl/e2e-ttl-es"
        ]
]

def cases = jdk_cases + feature_cases

node('skywalking') {
    env.JAVA_HOME = "${tool 'JDK 1.8 (latest)'}"
    env.MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit -Xmx3g'

    stage('Checkout Source Code') {
        deleteDir()
        checkout scm
        sh 'git submodule update --init'
    }

    if (!sh(returnStatus: true, script: 'bash tools/ci/e2e-build-condition.sh')) {
        echo 'Changed file sets do not match criteria, returning'
        return
    }

    stage('Prepare Distribution Package') {
        parallel(
            'Check Codes': {
                sh './mvnw -q checkstyle:check apache-rat:check'
            },
            'Build Dist Package': {
                sh './mvnw -q -Dcheckstyle.skip -Drat.skip -T2 -Dmaven.compile.fork -Dmaven.compiler.maxmem=3072 -DskipTests -am clean install'
            },
            'Compile Test Codes': {
                sh './mvnw -q -f test/e2e/pom.xml -pl e2e-base clean install'
            },
            failFast: true
        )
        stash name: 'stashed', includes: 'dist/**,test/**,.mvn/**,mvnw'
    }

    stage('Run End-to-End Tests') {
        parallel(cases.collectEntries {
            [(it.name): buildStageOf(it)]
        })
    }
}

def buildStageOf(testCase) {
    return {
        node('skywalking') {
            stage(testCase.name) {
                unstash 'stashed'
                retry(2) {
                    try {
                        sh "E2E_VERSION=${testCase.e2eVersion} bash -x test/e2e/run.sh ${testCase.moduleName}"
                    } finally {
                        cleanUp(testCase)
                    }
                }
            }
        }
    }
}

def cleanUp(testCase) {
    def testCaseName = testCase.moduleName.replace("/", "-")
    // "Abort old build on update" will interrupt the job completely,
    // we need to clean up when there are containers started by the e2e tests
    sh "docker ps || true"
    sh "docker stop \$(docker ps -aqf \"name=skywalking-e2e-container-${BUILD_ID}-${testCaseName}\") || true"
    sh "docker rm   \$(docker ps -aqf \"name=skywalking-e2e-container-${BUILD_ID}-${testCaseName}\") || true"

    // Files created by docker container in the directories that are mounted from the host to
    // the container can not be deleted by `deleteDir()`, we need to mount it again and delete them
    // inside the container
    //
    // Delete all distribution folder
    sh "docker run -v \$(pwd):/sw alpine sh -c \"sleep 10 && rm -rf /sw/${testCase.moduleName}/*\" || true"

    deleteDir()
}