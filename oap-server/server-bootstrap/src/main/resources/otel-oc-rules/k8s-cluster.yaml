# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This will parse a textual representation of a duration. The formats
# accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}
# with days considered to be exactly 24 hours.
# <p>
# Examples:
# <pre>
#    "PT20.345S" -- parses as "20.345 seconds"
#    "PT15M"     -- parses as "15 minutes" (where a minute is 60 seconds)
#    "PT10H"     -- parses as "10 hours" (where an hour is 3600 seconds)
#    "P2D"       -- parses as "2 days" (where a day is 24 hours or 86400 seconds)
#    "P2DT3H4M"  -- parses as "2 days, 3 hours and 4 minutes"
#    "P-6H3M"    -- parses as "-6 hours and +3 minutes"
#    "-P6H3M"    -- parses as "-6 hours and -3 minutes"
#    "-P-6H+3M"  -- parses as "+6 hours and -3 minutes"
# </pre>
expSuffix: tag({tags -> tags.cluster = 'k8s_cluster::' + tags.cluster}).service(['cluster'])
metricPrefix: k8s_cluster
metricsRules:


  - name: cpu_cores
    exp: (kube_node_status_capacity * 100).tagEqual('resource' , 'cpu').sum(['cluster'])
  - name: cpu_cores_allocatable
    exp: (kube_node_status_allocatable * 100).tagEqual('resource' , 'cpu').sum(['cluster'])
  - name: cpu_cores_requests
    exp: (kube_pod_container_resource_requests * 100).tagEqual('resource' , 'cpu').sum(['cluster'])
  - name: cpu_cores_limits
    exp: (kube_pod_container_resource_limits * 100).tagEqual('resource' , 'cpu').sum(['cluster'])

  - name: memory_total
    exp: kube_node_status_capacity.tagEqual('resource' , 'memory').sum(['cluster'])
  - name: memory_allocatable
    exp: kube_node_status_allocatable.tagEqual('resource' , 'memory').sum(['cluster'])
  - name: memory_requests
    exp: kube_pod_container_resource_requests.tagEqual('resource' , 'memory').sum(['cluster'])
  - name: memory_limits
    exp: kube_pod_container_resource_limits.tagEqual('resource' , 'memory').sum(['cluster'])

  - name: disk_total
    exp: kube_node_status_capacity.tagEqual('resource' , 'ephemeral_storage').sum(['cluster'])
  - name: disk_allocatable
    exp: kube_node_status_allocatable.tagEqual('resource' , 'ephemeral_storage').sum(['cluster'])

  - name: node_count
    exp: kube_node_info.sum(['cluster'])
  - name: node_status
    exp: kube_node_status_condition.tagMatch('status' , 'true|unknown').sum(['cluster' , 'node' ,'condition'])

  - name: namespace_count
    exp: kube_namespace_labels.sum(['cluster' , 'namespace'])

  - name: deployment_count
    exp: kube_deployment_labels.sum(['cluster' , 'deployment'])
  - name: deployment_status
    exp: kube_deployment_status_condition.tagMatch('status' , 'true').sum(['cluster' , 'deployment' ,'condition'])
  - name: deployment_spec_replicas
    exp: kube_deployment_spec_replicas.sum(['cluster' , 'deployment'])


  - name: service_count
    exp: kube_service_info.sum(['cluster' , 'service'])
  - name: container_count
    exp: kube_pod_container_info.sum(['cluster' , 'container'])
  - name: container_status_waiting
    exp: kube_pod_container_status_waiting.sum(['cluster' , 'container'])
  - name: container_status_terminated
    exp: kube_pod_container_status_terminated.sum(['cluster' , 'container'])


  - name: pod_count
    exp: kube_pod_info.sum(['cluster'])
  - name: pod_status_running
    exp: kube_pod_status_phase.tagMatch('phase' , 'Running').sum(['cluster' , 'pod'])
  - name: pod_status_not_running
    exp: kube_pod_status_phase.tagNotMatch('phase' , 'Running').sum(['cluster' , 'pod'])
