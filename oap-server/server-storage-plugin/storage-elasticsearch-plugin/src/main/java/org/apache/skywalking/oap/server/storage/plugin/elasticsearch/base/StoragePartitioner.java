/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import lombok.extern.slf4j.Slf4j;
import org.apache.skywalking.apm.util.StringUtil;
import org.apache.skywalking.oap.server.core.storage.model.Model;

@Slf4j
public enum StoragePartitioner {
    /**
     * The telemetry data, that generated by OAL or MAL, would be partitioned to storage by the functions of the OAL or
     * MAL. And, the other record data would be insulated storage by themselves definitions.
     */
    INSTANCE;
    private final Base64.Encoder encoder = Base64.getEncoder();
    public static final String LOGIC_TABLE_NAME = "logic_table";

    /**
     * The relations of the logic table and the physical table.
     */
    private final Map<String, String> tableRelations = new ConcurrentHashMap<>();

    public String getTableName(Model model) {
        return StringUtil.isNotBlank(
            model.getAggregationFunctionName()) ? model.getAggregationFunctionName() : model.getName();
    }

    /**
     * Generate the index doc ID. When a model is the aggregation storage mode, the logicTableName is a part of new ID
     * to avoid conflicts.
     */
    public String generateDocId(Model model, String originalID) {
        if (!isAggregationMode(model)) {
            return originalID;
        }
        return this.generateDocId(model.getName(), originalID);
    }

    /**
     * Generate the index doc ID.
     */
    public String generateDocId(String logicTableName, String originalID) {
        return encoder.encodeToString(logicTableName.getBytes(StandardCharsets.UTF_8)) + originalID;
    }

    /**
     * Check the mode of the Model definition.
     */
    public boolean isAggregationMode(Model model) {
        return StringUtil.isNotBlank(model.getAggregationFunctionName());
    }

    /**
     * Append the value to the {@link #LOGIC_TABLE_NAME} when running in the aggregation mode.
     */
    /**
     * When a model is the aggregation storage mode, a column named {@link #LOGIC_TABLE_NAME} would be append to the
     * physical index. The value of the column is the original table name in other storages, such as the OAL name.
     */
    public Map<String, Object> appendLogicTableColumn(Model model, Map<String, Object> columns) {
        if (!isAggregationMode(model)) {
            return columns;
        }
        columns.put(LOGIC_TABLE_NAME, this.getLogicTableColumnVal(model.getName()));
        return columns;
    }

    /**
     * BASE64 encode the original logic table name.
     */
    public String getLogicTableColumnVal(String logicTableName) {
        return encoder.encodeToString(logicTableName.getBytes(StandardCharsets.UTF_8));
    }

    public String getPhysicialTableName(String logicName) {
        return Optional.of(this.tableRelations.get(logicName)).orElse(logicName);
    }

    public void registerTableRelation(String logicName, String physicalName) {
        this.tableRelations.put(logicName, physicalName);
    }
}
