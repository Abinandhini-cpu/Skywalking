#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#ARG_POSITIONAL_INF([scenario],[The scenario that you want to running])
#DEFINE_SCRIPT_DIR([AGENT_TEST_PLUGIN_HOME])
#ARG_HELP([])
#ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_scenario=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf 'Usage: %s [-h|--help] [<scenario-1>] ... [<scenario-n>] ...\n' "$0"
	printf '\t%s\n' "<scenario>: The scenario that you want to running"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names=""
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_scenario[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
AGENT_TEST_PLUGIN_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#
SCENARIO_PACKAGES_TARGET_DIRECTORY=${AGENT_TEST_PLUGIN_HOME}/dist
SCENARIO_CASES_HOME=${AGENT_TEST_PLUGIN_HOME}/testcase && mkdir -p ${SCENARIO_CASES_HOME}
MVN_EXEC=${AGENT_TEST_PLUGIN_HOME}/../../../mvnw

UNPACKED_VERSION=()
for SCENARIO in ${_arg_scenario[@]}
do
  # check if the scenario directory is existing
  SCENARIO_HOME=${AGENT_TEST_PLUGIN_HOME}/${SCENARIO}
  #
  SUPPORT_VERSION_FILE=${SCENARIO_HOME}/support-version.list
  SUPPORT_VERSIONS=($(cat $SUPPORT_VERSION_FILE))
  # echo "Support version: ${SUPPORT_VERSIONS[@]}"

  MVN_PROFILES=""
  for SCENARIO_VERSION in ${SUPPORT_VERSIONS[@]}
  do
    MVN_PROFILES="$MVN_PROFILES,${SCENARIO}-${SCENARIO_VERSION}"
  done
  cd ${SCENARIO_HOME} && ${MVN_EXEC} clean write-text-files:write-text-files package -P ${MVN_PROFILES}

  for SCENARIO_VERSION in ${SUPPORT_VERSIONS[@]}
  do
    # check if the scenario package is exist. if not. record it and then throw an exception

    tar -zxvf ${SCENARIO_PACKAGES_TARGET_DIRECTORY}/${SCENARIO}-${SCENARIO_VERSION}.tar.gz -C ${SCENARIO_CASES_HOME} > /dev/null 2>&1
    bash ${SCENARIO_CASES_HOME}/${SCENARIO}-${SCENARIO_VERSION}/scenario.sh
  done
done


#
# ] <-- needed because of Argbash
